{"version":3,"sources":["redux/actions/index.js","utils/index.js","pages/Login.js","pages/NotFound.js","components/Select.js","components/Input.js","components/Button.js","components/Table.js","components/Header.js","services/api.js","pages/Wallet.js","App.js","redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store/index.js","serviceWorker.js","index.js"],"names":["storeExpense","expense","type","TABLE_HEADERS","PAY_OPTIONS","EXPENSE_TAGS","INITIAL_STATE","isEditing","id","value","description","currency","method","tag","enableButton","object","Object","values","editingId","every","Boolean","EMAIL_PATTERN","Login","handleChange","target","setState","state","email","password","e","preventDefault","this","props","storeEmail","history","push","className","placeholder","onChange","onClick","handleClick","disabled","length","test","React","Component","connect","dispatch","userEmail","storeEmailAction","NotFound","Select","name","options","handle","htmlFor","map","option","index","key","defaultProps","Input","text","Button","Table","expenses","deleteExpense","editExpense","header","exchange","exchangeRates","currencyNames","split","exchangeRate","ask","toFixed","deleteExpenseAction","Header","totalExpense","a","fetch","currencies","json","getCurrencies","Wallet","create","prevState","data","update","updateExpense","then","response","keys","filter","c","reduce","sum","getTotalSpend","user","wallet","storeExpenseAction","updateExpenseAction","App","exact","path","component","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4cece734.chunk.js","sourcesContent":["export const storeEmailAction = (userEmail) => ({ type: 'STORE_EMAIL', userEmail });\n\nexport const storeExpense = (expense) => ({ type: 'STORE_EXPENSE', expense });\n\nexport const deleteExpense = (id) => ({ type: 'DELETE_EXPENSE', id });\n\nexport const updateExpense = (expense) => ({ type: 'UPDATE_EXPENSE', expense });\n\nexport function storeWithExchanges(expense) {\n  return async (dispatch) => {\n    let exchangeRates = await fetch('https://economia.awesomeapi.com.br/json/all');\n    exchangeRates = await exchangeRates.json();\n    return dispatch(storeExpense({ ...expense, exchangeRates }));\n  };\n}\n","export const TABLE_HEADERS = ['Descrição', 'Tag', 'Método de pagamento', 'Valor', 'Moeda',\n  'Câmbio utilizado', 'Valor convertido', 'Moeda de conversão', 'Editar/Excluir'];\n\nexport const PAY_OPTIONS = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n\nexport const EXPENSE_TAGS = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nexport const INITIAL_STATE = {\n  isEditing: false,\n  id: 0,\n  value: '',\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n};\n\nexport const getTotalSpend = (expenses) => {\n  const allExpenses = expenses.map(({ value, currency, exchangeRates }) => {\n    const exchange = exchangeRates[currency].ask;\n    return value * exchange;\n  });\n\n  return allExpenses.reduce((sum, expense) => sum + expense, 0);\n};\n\nexport const enableButton = (object) => (\n  // A operação abaixo verifica se todas as propriedades do objeto são verdadeiras, e portanto, estão preenchidas.\n  // Caso não estejam, será retornado 'false', e o operador '!' converterá para 'true', assim desabilitando o botão.\n  !Object.values({ ...object, id: true, isEditing: true, editingId: true }).every(Boolean)\n);\n\nexport const MIN_LENGTH = 6;\n\nexport const EMAIL_PATTERN = /\\S+@\\S+\\.\\S+/;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { storeEmailAction } from '../redux/actions/index';\nimport '../styles/Login.css';\nimport { MIN_LENGTH, EMAIL_PATTERN } from '../utils';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n    };\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.id]: target.value,\n    });\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    const { storeEmail, history } = this.props;\n    const { email } = this.state;\n    storeEmail(email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { email, password } = this.state;\n\n    return (\n      <main className=\"login-page\">\n        <h2>Carteira Digital</h2>\n        <form className=\"login-form\">\n          <input\n            type=\"email\"\n            placeholder=\"email\"\n            id=\"email\"\n            onChange={ this.handleChange }\n            value={ email }\n          />\n          <input\n            type=\"password\"\n            placeholder=\"senha\"\n            id=\"password\"\n            onChange={ this.handleChange }\n            value={ password }\n          />\n          <button\n            type=\"submit\"\n            onClick={ (e) => this.handleClick(e) }\n            disabled={\n              password.length < MIN_LENGTH || !EMAIL_PATTERN.test(email)\n            }\n          >\n            Entrar\n          </button>\n        </form>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  storeEmail: (userEmail) => dispatch(storeEmailAction(userEmail)),\n});\n\nLogin.propTypes = {\n  storeEmail: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(PropTypes.func).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport '../styles/NotFound.css';\n\nclass NotFound extends React.Component {\n  render() {\n    return (\n      <h1 className=\"not-found-text\">Página não encontrada</h1>\n    );\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Select extends React.Component {\n  render() {\n    const { name, id, options, handle } = this.props;\n    return (\n      <label htmlFor={ id }>\n        { name }\n        <select name={ id } id={ id } onChange={ handle }>\n          {\n            options.map((option, index) => (\n              <option key={ index } value={ option }>{option}</option>\n            ))\n          }\n        </select>\n      </label>\n    );\n  }\n}\n\nSelect.defaultProps = {\n  options: [],\n};\n\nSelect.propTypes = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string),\n  handle: PropTypes.func.isRequired,\n};\n\nexport default Select;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Input extends React.Component {\n  render() {\n    const { text, id, handle, value } = this.props;\n    return (\n      <label htmlFor={ id }>\n        <p>{ text }</p>\n        <input type=\"text\" id={ id } onChange={ handle } value={ value } />\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  text: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  handle: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Button extends React.Component {\n  render() {\n    const { text, onClick, className, disabled } = this.props;\n    return (\n      <button\n        type=\"button\"\n        onClick={ onClick }\n        className={ className }\n        disabled={ disabled }\n      >\n        { text }\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  onClick: () => {},\n  className: '',\n  disabled: false,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { TABLE_HEADERS } from '../utils';\nimport { deleteExpense as deleteExpenseAction } from '../redux/actions/index';\nimport Button from './Button';\nimport '../styles/Table.css';\n\nclass Table extends Component {\n  render() {\n    const { expenses, deleteExpense, editExpense } = this.props;\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            {\n              TABLE_HEADERS.map((header) => (\n                <th key={ header }>{header}</th>\n              ))\n            }\n          </tr>\n        </thead>\n        <tbody>\n          {\n            expenses.map((expense) => {\n              const exchange = expense.exchangeRates[expense.currency];\n              const currencyNames = exchange.name.split('/'); // O formato da chave exchange.name é: Moeda/Moeda de conversão.\n              const exchangeRate = exchange.ask; // Esta é a taxa de câmbio utilizada.\n              return (\n                <tr key={ expense.id }>\n                  <td>{expense.description}</td>\n                  <td>{expense.tag}</td>\n                  <td>{expense.method}</td>\n                  <td>{(+expense.value).toFixed(2)}</td>\n                  <td>{currencyNames[0]}</td>\n                  <td>{(+exchangeRate).toFixed(2)}</td>\n                  <td>{(expense.value * exchangeRate).toFixed(2)}</td>\n                  <td>{currencyNames[1]}</td>\n                  <td>\n                    <Button\n                      text=\"Editar\"\n                      onClick={ () => editExpense(expense) }\n                      className=\"expense-row-btn edit\"\n                    />\n                    <Button\n                      text=\"Excluir\"\n                      onClick={ () => deleteExpense(expense.id) }\n                      className=\"expense-row-btn delete\"\n                    />\n                  </td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (id) => dispatch(deleteExpenseAction(id)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Table);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/Header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { email, totalExpense } = this.props;\n    return (\n      <header>\n        <h2>Carteira Digital</h2>\n        <div className=\"user-data\">\n          <p>{`Email: ${email}`}</p>\n          <div>\n            <p>{`Despesa Total: R$ ${totalExpense.toFixed(2)}`}</p>\n            <span>BRL</span>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  totalExpense: PropTypes.number.isRequired,\n};\n\nexport default Header;\n","async function getCurrencies() {\n  const url = 'https://economia.awesomeapi.com.br/json/all';\n  let currencies = await fetch(url);\n  currencies = await currencies.json();\n  return currencies;\n}\n\nexport default getCurrencies;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Input, Select, Table, Button, Header } from '../components';\nimport getCurrencies from '../services/api';\nimport { storeWithExchanges as storeExpenseAction,\n  updateExpense as updateExpenseAction } from '../redux/actions/index';\nimport { PAY_OPTIONS, EXPENSE_TAGS, INITIAL_STATE,\n  getTotalSpend, enableButton } from '../utils';\nimport '../styles/Wallet.css';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = INITIAL_STATE;\n  }\n\n  componentDidMount() {\n    getCurrencies()\n      .then((response) => {\n        const currencies = Object.keys(response).filter((c) => c !== 'USDT');\n        this.setState({\n          currencies,\n        });\n      });\n  }\n\n  create = () => {\n    const { storeExpense } = this.props;\n    const { currencies, ...data } = this.state;\n    storeExpense(data);\n\n    this.setState((prevState) => ({\n      ...INITIAL_STATE,\n      id: prevState.id + 1,\n    }));\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.id]: target.value,\n    });\n  }\n\n  editExpense = (expense) => {\n    // O id da tarefa em edição é salvo numa chave diferete, para não perder a contagem normal dos ids.\n    const { id: editingId, ...data } = expense;\n\n    this.setState({\n      ...data,\n      editingId,\n      isEditing: true,\n    });\n  }\n\n  update = () => {\n    const { updateExpense } = this.props;\n    const { currencies, isEditing, id, editingId, ...data } = this.state;\n    const expense = { ...data, id: editingId };\n    updateExpense(expense);\n\n    this.setState({\n      ...INITIAL_STATE,\n      id,\n      isEditing: false,\n    });\n  }\n\n  // eslint-disable-next-line max-lines-per-function\n  render() {\n    const { userEmail, expenses } = this.props;\n    const { currencies, value, description, isEditing } = this.state;\n    const totalExpense = expenses.length > 0 ? getTotalSpend(expenses) : 0;\n\n    return (\n      <div>\n        <Header email={ userEmail } totalExpense={ totalExpense } />\n        <main>\n          <form className={ `expense-form editing-${isEditing}` }>\n            <Input text=\"Valor\" id=\"value\" handle={ this.handleChange } value={ value } />\n            <Input\n              text=\"Descrição\"\n              id=\"description\"\n              handle={ this.handleChange }\n              value={ description }\n            />\n            <Select\n              name=\"Moeda\"\n              id=\"currency\"\n              options={ currencies }\n              handle={ this.handleChange }\n            />\n            <Select\n              name=\"Método de pagamento\"\n              id=\"method\"\n              options={ PAY_OPTIONS }\n              handle={ this.handleChange }\n            />\n            <Select\n              name=\"Tag\"\n              id=\"tag\"\n              options={ EXPENSE_TAGS }\n              handle={ this.handleChange }\n            />\n            {\n              isEditing ? <Button\n                text=\"Editar gasto\"\n                onClick={ this.update }\n                disabled={ enableButton(this.state) }\n              />\n                : (\n                  <Button\n                    onClick={ this.create }\n                    text=\"Adicionar despesa\"\n                    disabled={ enableButton(this.state) }\n                  />)\n            }\n          </form>\n          <Table expenses={ expenses } editExpense={ this.editExpense } />\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  storeExpense: (expense) => dispatch(storeExpenseAction(expense)),\n  updateExpense: (expense) => dispatch(updateExpenseAction(expense)),\n});\n\nWallet.propTypes = {\n  userEmail: PropTypes.string.isRequired,\n  storeExpense: PropTypes.func.isRequired,\n  updateExpense: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\nimport Login from './pages/Login';\nimport NotFound from './pages/NotFound';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n      <Route component={ NotFound } />\n    </Switch>\n  );\n}\n\nexport default App;\n","const INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'STORE_EMAIL':\n    return { email: action.userEmail };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","const INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'STORE_EXPENSE':\n    return (\n      { ...state, expenses: [...state.expenses, action.expense] }\n    );\n  case 'DELETE_EXPENSE':\n    return (\n      { ...state, expenses: state.expenses.filter((e) => e.id !== action.id) }\n    );\n  case 'UPDATE_EXPENSE':\n    return (\n      { ...state,\n        expenses: state.expenses.map(\n          (e) => (e.id !== action.expense.id ? e : action.expense),\n        ),\n      }\n    );\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}